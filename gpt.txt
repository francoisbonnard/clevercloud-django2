== Method

=== Architecture Overview

The deployment architecture consists of the Django application hosted on Clever Cloud's Python runtime, a MySQL database managed by Clever Cloud, and an S3-compatible object storage for photo uploads. The application will be configured to connect to the MySQL database for data persistence and the S3 bucket for storing uploaded photos.

=== Database Schema

The database will include at least the following entities:

- `User`: To store user information.
- `Photo`: To store photo metadata, including references to the user who uploaded the photo and the photo's URL in the S3 bucket.

.Example of a simplified database schema
----
User:
- id (PK)
- username
- password
- email

Photo:
- id (PK)
- user_id (FK to User)
- photo_url
- upload_date
- description
----

=== Integrating S3-Compatible Object Storage

The Django application will use `django-storages` and `boto3` to integrate with S3-compatible object storage. Configuration settings will include the bucket name, access key, secret key, and the S3 endpoint URL provided by Clever Cloud or another S3-compatible service.

.Configuration example for S3-compatible storage in Django's settings.py
----
AWS_ACCESS_KEY_ID = 'your-access-key'
AWS_SECRET_ACCESS_KEY = 'your-secret-key'
AWS_STORAGE_BUCKET_NAME = 'your-bucket-name'
AWS_S3_ENDPOINT_URL = 'https://s3.example.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
----

This configuration enables your Django application to store and retrieve photos from the specified S3 bucket, leveraging Django's built-in support for handling static and media files.

